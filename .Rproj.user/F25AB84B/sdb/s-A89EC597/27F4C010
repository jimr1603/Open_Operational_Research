{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Open Organograms\"\nauthor: \"James Riley\"\ndate: '2018-03-26'\ncategories: [\"R\", \"Organogram\"]\ntags:\n- data.gov.uk\n- tidyverse\n- data.table\n- Open-Organograms\n---\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(collapse = TRUE)\nlibrary(\"data.table\")\nlibrary(\"here\")\nlibrary(\"ggplot2\")\n```\n##Background\n\nOne of the reasons I've founded this site is because I've discovered https://data.gov.uk/ and I have ideas. In particular, I won't discuss outside of work anything I only know through work, so it was nice to see pay data in the public sphere. \n\nFull background is at http://guidance.data.gov.uk/organogram-data.html but basically, the Prime Minister decided that the public deserve the structure and hierarchy of the Government Departments, and a few agencies. \n\nAll data used in this post was released under the [Open Government Licence](http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/). \n\nFor reference, there's a good table on [Wikipedia](https://en.wikipedia.org/wiki/Civil_Service_(United_Kingdom)#Grading_schemes) explaining what our grading structure is, including some info the MOD have given comparing grades in Civil and Military Service.\n\n##Processing\n\nI have decided that not all of these posts will be final finished polished pieces but will include some work in progress. \n\nNaturally, the first dataset I grabbed was that for the Department of Health and Social Care. Immediately there is a problem - the background above says that the PM wanted everyone to release the data 2ce a year, but our last drop was in 2016. Very often in messing around with data you find that it's out of date. The other thing you find is that there are data standards which get widely ignored.\n\nFor now I'm interested in finding median salary, and what a department costs per minute/hour. I need the ggplot practice, so I'm doing some column charts of the distributions too.\n\n##Modelling assumptions\n\nLooking at the data, I can see the band for each paygrade, rather than actual pay. So I'm going to guess that everyone is paid at the bottom of their grade. I'm also assuming that everyone has 25 days leave + 9 bank holidays. (9? Yes. Civil servants also get the Queen's official birthday off.)\n\nI also assume everyone's on a 37 hour week, because I am. \n\nI am currently modelling just the part of salary that people take home and have not applied any uplifts for employer's NI or pension contributions. I haven't looked for pension contributions by department yet, and I've not yet looked up and coded the NI contributions. \n\nTogether, these should mean there is something of an underestimate in the actual cost of staffing, but should be reasonable for looking at average gross salary.\n\n##DHSC\n\nThis went reasonably smoothly, possibly given that I know the grading scheme. Someone along the line had decided that we wanted info on removed Senior Civil Servants, so I had to filter them out. This processing was done on a data.table framework.\n\n```{r}\nc <- read.csv(here(\"static\", \"data\", \"Open Government Licence\",\"department-of-health__31-03-2016__dh_010416-DH-Organogram-junior.csv\"), stringsAsFactors = FALSE)\nd <-read.csv(here(\"static\", \"data\",\"Open Government Licence\", \"department-of-health__31-03-2016__dh_010416-DH-Organogram-senior.csv\"), stringsAsFactors = FALSE)\n\nc <- as.data.table(c)\nd<- as.data.table(d)\n```\n\n```{r}\njuniors = c[,.(N=sum(Number.of.Posts.in.FTE),min=min(Payscale.Minimum....),max=max(Payscale.Maximum....)),by=Grade]\nseniors = d[!(Name %in% c(\"N/D\",\"ELIMINIATED\", \"VACANT\")),.(N=sum(FTE),min=max(Actual.Pay.Floor....),max=max(Actual.Pay.Ceiling....)),by=Grade..or.equivalent.]\n```\n\nThen I wanted to append one table to the other. For that they need column names that match. Since I want to find a median I need a cumulative sum, and to find the middle person.\n\n```{r}\ncombined <- rbindlist(list(juniors,seniors))\n\ncombined <- combined[order(min)] \n\ncombined[,cumulative:=cumsum(N)]\n\ntotal_staff <- combined[,sum(N)]\nmedian_record <- combined[cumulative>total_staff/2][1]\nmedian_salary = median_record[,min]\n```\n\nThen total bill over an estimate at total hours worked in a year gives me the total bill for the department per hour and per minute.\n\n```{r}\ntotal_bill_min <- combined[,sum(N*min)]\ntotal_hours <- (365.25 / 7 * 5 - 25 -9) * (37/5)\n\navg_hourly <- median_salary/total_hours \navg_minutely <- avg_hourly/60\n```\n\nAnd so I get my outputs, which I've not nicely formatted yet.\n\n```{r}\ntotal_staff\n\nmedian_salary\n\ntotal_bill_min\n\navg_hourly\n\nggplot(data=combined, aes(Grade, N)) + geom_col()\n```\n\nIn fact, that's a totally wrong plot! ggplot has decided it knows my labels better than me and thinks it can do better. I could manually set it, but I'm already past bed time on a work night. ",
    "created" : 1522471290163.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2131767752",
    "id" : "27F4C010",
    "lastKnownWriteTime" : 1522471306,
    "last_content_update" : 1522471508901,
    "path" : "~/bin/R/Open_Operational_Research/content/post/2018-03-26-open-organograms.Rmd",
    "project_path" : "content/post/2018-03-26-open-organograms.Rmd",
    "properties" : {
        "last_setup_crc32" : "86C9DF6Ba891bc4c"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}