plot(wy_crashes)
wy_boundary <-  police_boundaries[police_boundaries$pfa16nm == "West Yorkshire", ]
wy_crashes <- crashes %>%
format_sf()
wy_crashes <- wy_crashes[wy_boundary, ]
casualties %>%
filter(accident_index %in% wy_crashes$accident_index) %>%
filter(casualty_type == "Cyclist") %>%
group_by(casualty_severity) %>%
summarise(n=n()) %>%
mutate(proportion=n/sum(n)) %>%
knitr::kable()
casualties %>%
filter(accident_index %in% wy_crashes$accident_index) %>%
filter(casualty_type != "Cyclist") %>%
group_by(casualty_severity) %>%
summarise(n=n()) %>%
mutate(proportion=n/sum(n)) %>%
knitr::kable()
121/37
121/37
cyclists <- casualties %>%
filter(casualty_type == "Cyclist") %>%
pull(accident_index)
cyclists
wy_crashes %>%
filter(accident_index %in% cyclists) %>%
plot()
cyc <- wy_crashes %>%
filter(accident_index %in% cyclists)
plot(cyc$accident_index)
plot(cyc[accident_index,])
plot(cyc["accident_index",])
plot(cyc)
plot(cyc, max.plot = 1)
library(leaflet)
install.packages("leaflet")
leaflet::leaflet(cyc)
male_driving <- vehicles %>%
filter(sex_of_driver == "Male", vehicle_type == "Car")
female_driving <- vehicles %>%
filter(sex_of_driver == "Female", vehicle_type == "Car")
View(female_driving)
vehicles %>%
mutate(male = if_else(accident_index %in% male_driving, 1, 0))
unknown_other <- vehicles %>%
filter(accident_index %in% male_driving) %>%
filter(vehicle_type == "Car", sex_of_driver == "Not known") %>%
pull(accident_index)
blogdown::serve_site(host = '0.0.0.0')
male_crash <- crashes %>%
filter(accident_index %in% male_driving) %>%
select(accident_severity, number_of_casualties)
male_driving
male_driving <- vehicles %>%
filter(sex_of_driver == "Male", vehicle_type == "Car") %>%
pull(accident_index)
unknown_other <- vehicles %>% #Filter out accident IDs where there's someone of unknown sex driving a car.
filter(accident_index %in% male_driving) %>%
filter(vehicle_type == "Car", sex_of_driver == "Not known") %>%
pull(accident_index)
male_driving <- setdiff(male_driving, unknown_other)
female_driving <- vehicles %>%
filter(sex_of_driver == "Female", vehicle_type == "Car") %>%
pull(accident_index)
unknown_other <- vehicles %>% #Filter out accident IDs where there's someone of unknown sex driving a car.
filter(accident_index %in% female_driving) %>%
filter(vehicle_type == "Car", sex_of_driver == "Not known") %>%
pull(accident_index)
female_driving <- setdiff(female_driving, unknown_other)
male_crash <- crashes %>%
filter(accident_index %in% male_driving) %>%
select(accident_severity, number_of_casualties)
male_crash
gendered_crashes <- bind_rows(male_crash, female_crash)
gendered_crashes %>%
group_by(driver, accident_severity) %>%
summarise(n=n())
male_crash <- crashes %>%
filter(accident_index %in% male_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(driver = "Male")
female_crash <- crashes %>%
filter(accident_index %in% female_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(driver = "Female")
##In crashes where there was a male driver and a female driver, we've double counted.
gendered_crashes <- bind_rows(male_crash, female_crash)
gendered_crashes %>%
group_by(driver, accident_severity) %>%
summarise(n=n())
male_driving <- vehicles %>%
filter(sex_of_driver == "Male", vehicle_type == "Car") %>%
pull(accident_index)
unknown_other <- vehicles %>% #Filter out accident IDs where there's someone of unknown sex driving a car.
filter(accident_index %in% male_driving) %>%
filter(vehicle_type == "Car", sex_of_driver == "Not known") %>%
pull(accident_index)
male_driving <- setdiff(male_driving, unknown_other)
female_driving <- vehicles %>%
filter(sex_of_driver == "Female", vehicle_type == "Car") %>%
pull(accident_index)
unknown_other <- vehicles %>% #Filter out accident IDs where there's someone of unknown sex driving a car.
filter(accident_index %in% female_driving) %>%
filter(vehicle_type == "Car", sex_of_driver == "Not known") %>%
pull(accident_index)
female_driving <- setdiff(female_driving, unknown_other)
male_crash <- crashes %>%
filter(accident_index %in% male_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(sex = "Male")
female_crash <- crashes %>%
filter(accident_index %in% female_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(sex = "Female")
##In crashes where there was a male driver and a female driver, we've double counted.
gendered_crashes <- bind_rows(male_crash, female_crash)
gendered_crashes %>%
group_by(driver, accident_severity) %>%
summarise(n=n()) %>%
ggplot(aes(x=accident_severity, y=n, fill=sex)) + geom_col()
male_crash <- crashes %>%
filter(accident_index %in% male_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(sex = "Male")
female_crash <- crashes %>%
filter(accident_index %in% female_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(sex = "Female")
##In crashes where there was a male driver and a female driver, we've double counted.
gendered_crashes <- bind_rows(male_crash, female_crash)
gendered_crashes %>%
group_by(sex, accident_severity) %>%
summarise(n=n()) %>%
ggplot(aes(x=accident_severity, y=n, fill=sex)) + geom_col()
male_crash <- crashes %>%
filter(accident_index %in% male_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(sex = "Male")
female_crash <- crashes %>%
filter(accident_index %in% female_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(sex = "Female")
##In crashes where there was a male driver and a female driver, we've double counted.
gendered_crashes <- bind_rows(male_crash, female_crash)
gendered_crashes %>%
group_by(sex, accident_severity) %>%
summarise(n=n()) %>%
ggplot(aes(x=accident_severity, y=n, colour=sex)) + geom_col()
male_crash <- crashes %>%
filter(accident_index %in% male_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(sex = "Male")
female_crash <- crashes %>%
filter(accident_index %in% female_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(sex = "Female")
##In crashes where there was a male driver and a female driver, we've double counted.
gendered_crashes <- bind_rows(male_crash, female_crash)
gendered_crashes %>%
group_by(sex, accident_severity) %>%
summarise(n=n()) %>%
ggplot(aes(x=accident_severity, y=n, fill=sex)) + geom_bar()
male_crash <- crashes %>%
filter(accident_index %in% male_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(sex = "Male")
female_crash <- crashes %>%
filter(accident_index %in% female_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(sex = "Female")
##In crashes where there was a male driver and a female driver, we've double counted.
gendered_crashes <- bind_rows(male_crash, female_crash)
gendered_crashes %>%
group_by(sex, accident_severity) %>%
summarise(n=n()) %>%
ggplot(aes(x=accident_severity, y=n, colour=sex)) + geom_point()
male_crash <- crashes %>%
filter(accident_index %in% male_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(sex = "Male")
female_crash <- crashes %>%
filter(accident_index %in% female_driving) %>%
select(accident_severity, number_of_casualties) %>%
mutate(sex = "Female")
##In crashes where there was a male driver and a female driver, we've double counted.
gendered_crashes <- bind_rows(male_crash, female_crash)
gendered_crashes %>%
group_by(sex, accident_severity) %>%
summarise(n=n()) %>%
ggplot(aes(x=accident_severity, y=n, colour=sex)) + geom_point() + ggthemes::theme_few() + ggthemes::scale_colour_few()
gendered_crashes %>%
group_by(sex, number_of_casualties) %>%
summarise(n=n()) %>%
ggplot(aes(x=accident_severity, y=n, colour=sex)) + geom_point() + ggthemes::theme_few() + ggthemes::scale_colour_few()
gendered_crashes %>%
group_by(sex, number_of_casualties) %>%
summarise(n=n()) %>%
ggplot(aes(x=number_of_casualties, y=n, colour=sex)) + geom_point() + ggthemes::theme_few() + ggthemes::scale_colour_few()
View(female_crash)
View(vehicles)
wy_crashes
plot(wy_crashes)
plot(wy_crashes, pal = rainbow())
plot(wy_crashes, pal = rainbow(7))
plot(wy_crashes, pal = rainbow(6))
plot(wy_crashes, pal = rainbow(10))
plot(wy_crashes, pal = rainbow(100))
plot(wy_crashes, pal = rainbow(10))
plot(crashes)
plot(crashes %>% format_sf())
crash_gb <- crashes %>% format_sf()
plot(crash_gb)
crash_gb
crash_gb %>% select(accident_index)
crash_gb %>% select(accident_index) %>% plot()
crash_gb %>% select(accident_index)
plot(crash_gb %>% select(accident_index))
gb <- crash_gb %>% select(accident_index)
gb
plot(gb)
plot(gb)
crash_gb %>%
select(longitude) %>%
plot()
blogdown::stop_server()
95/98 * 100
97*0.02
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
1
library("tidyverse")
library("here")
set.seed(17978)
theme <- ggthemes::theme_few()
scale <- ggthemes::scale_colour_few()
plot_complex_points  <- function(z){
tibble(Re=Re(z),Im=Im(z)) %>%
ggplot(aes(x=Re,y=Im)) + scale + theme + geom_point(shape = ".") + coord_equal()
}
poly <- function(n){ #n roots of unity
complex(modulus = 1, argument = seq(0, 2*pi, length.out = n+1))[-1] #removing the first element to stop double-counting 1+0i.
}
number_of_points <- 1e3
pentagon <- poly(5)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(1:4, number_of_points, replace = T)
old_chosen_vertex <- chosen_vertex
for(i in 2:number_of_points){
chosen_vertex[i] <- ((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
chosen_vertex
old_chosen_vertex
points
View(tibble(old_chosen_vertex, chosen_vertex))
for(i in 2:number_of_points){
message(paste0("old vertex ", chosen_vertex[i-1], ", shifted by "
chosen_vertex[i], ", becomes "((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1))
chosen_vertex[i] <- ((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
number_of_points <- 1e3
pentagon <- poly(5)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(1:4, number_of_points, replace = T)
old_chosen_vertex <- chosen_vertex
for(i in 2:number_of_points){
message(paste0("old vertex ", chosen_vertex[i-1], ", shifted by "
chosen_vertex[i], ", becomes "((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1))
chosen_vertex[i] <- ((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
number_of_points <- 1e3
pentagon <- poly(5)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(1:4, number_of_points, replace = T)
old_chosen_vertex <- chosen_vertex
for(i in 2:number_of_points){
message(paste0("old vertex ", chosen_vertex[i-1], ", shifted by ",
chosen_vertex[i], ", becomes "((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1))
chosen_vertex[i] <- ((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
number_of_points <- 1e3
pentagon <- poly(5)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(1:4, number_of_points, replace = T)
old_chosen_vertex <- chosen_vertex
for(i in 2:number_of_points){
message(paste0("old vertex ", chosen_vertex[i-1], ", shifted by ",chosen_vertex[i], ", becomes ", ((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1))
chosen_vertex[i] <- ((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
number_of_points <- 1e2
pentagon <- poly(5)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(1:4, number_of_points, replace = T)
old_chosen_vertex <- chosen_vertex
for(i in 2:number_of_points){
message(paste0(chosen_vertex[i-1], ",+",chosen_vertex[i], "=", ((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1))
chosen_vertex[i] <- ((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
number_of_points <- 1e2
pentagon <- poly(5)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(1:4, number_of_points, replace = T)
old_chosen_vertex <- chosen_vertex
for(i in 2:number_of_points){
message(paste0(chosen_vertex[i-1], "+",chosen_vertex[i], "=", ((chosen_vertex[i-1] + chosen_vertex[i]-1) %% 5) + 1))
chosen_vertex[i] <-
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
number_of_points <- 1e2
pentagon <- poly(5)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(0:3, number_of_points, replace = T)
old_chosen_vertex <- chosen_vertex
for(i in 2:number_of_points){
chosen_vertex[i] <- ((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
plot_complex_points(points)
number_of_points <- 1e5
pentagon <- poly(5)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(0:3, number_of_points, replace = T)
old_chosen_vertex <- chosen_vertex
for(i in 2:number_of_points){
chosen_vertex[i] <- ((chosen_vertex[i-1] + chosen_vertex[i]) %% 5) + 1
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
plot_complex_points(points)
blogdown::serve_site()
blogdown::serve_site(host="0.0.0.0")
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
collapse = TRUE
)
library("tidyverse")
library("here")
set.seed(17978)
theme <- ggthemes::theme_few()
scale <- ggthemes::scale_colour_few()
plot_complex_points  <- function(z){
tibble(Re=Re(z),Im=Im(z)) %>%
ggplot(aes(x=Re,y=Im)) + scale + theme + geom_point(shape = ".") + coord_equal()
}
poly <- function(n){ #n roots of unity
complex(modulus = 1, argument = seq(0, 2*pi, length.out = n+1))[-1] #removing the first element to stop double-counting 1+0i.
}
poly(5) %>%
plot_complex_points()
blogdown::serve_site(host="0.0.0.0")
blogdown::serve_site()
blogdown::serve_site(host="0.0.0.0")
number_of_points <- 1e7
pentagon <- poly(5)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(0:3, number_of_points, replace = T)
for(i in 2:number_of_points){
chosen_vertex[i] <- ((chosen_vertex[i-1] - 1 + chosen_vertex[i]) %% 5) + 1
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
plot_complex_points(points[2:1e4])
plot_complex_points(points[2:1e5])
plot_complex_points(points[2:1e6])
plot_complex_points(points)
blogdown::serve_site(host="0.0.0.0")
chosen_vertex
normal_chaos_game <- function(n_gon, number_of_points){
polygon <- poly(n_gon)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(seq_len(n_gon), number_of_points, replace = T)
for(i in 2:number_of_points){
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
return(points)
}
normal_chaos_game <- function(n_gon, number_of_points){
polygon <- poly(n_gon)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(seq_len(n_gon), number_of_points, replace = T)
for(i in 2:number_of_points){
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
return(points)
}
normal_chaos_game <- function(n_gon, number_of_points=1e5){
polygon <- poly(n_gon)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(seq_len(n_gon), number_of_points, replace = T)
for(i in 2:number_of_points){
this_vertex <- pentagon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
return(points)
}
normal_chaos_game(3) %>%
plot_complex_points()
normal_chaos_game(6) %>% #An interesting case, roll a normal die every time!
plot_complex_points()
1
six <- normal_chaos_game(6)
six
normal_chaos_game(20) %>% #An interesting case, roll a normal die every time!
plot_complex_points()
1
normal_chaos_game(20) %>% #An interesting case, roll a normal die every time!
plot_complex_points()
normal_chaos_game <- function(n_gon, number_of_points=1e5){
polygon <- poly(n_gon)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(seq_len(n_gon), number_of_points, replace = T)
for(i in 2:number_of_points){
this_vertex <- polygon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
return(points)
}
normal_chaos_game(20) %>% #An interesting case, roll a normal die every time!
plot_complex_points()
normal_chaos_game(20, 1e6) %>% #An interesting case, roll a normal die every time!
plot_complex_points()
normal_chaos_game(12) %>% #An interesting case, roll a normal die every time!
plot_complex_points()
normal_chaos_game(120) %>% #An interesting case, roll a normal die every time!
plot_complex_points()
normal_chaos_game(100) %>% #An interesting case, roll a normal die every time!
plot_complex_points()
normal_chaos_game(10) %>% #An interesting case, roll a normal die every time!
plot_complex_points()
lag(1:10)
lag(1:10)
any(2:9 = lag(1:10))
any(2:9 == lag(1:10))
any(2:1 == lag(1:10))
any(2:11 == lag(1:10))
any(2:11 == lag(1:10),na.rm = T)
2:11
lag(1:10)
any(c(0,1,rep(5,8)) == lag(1:10),na.rm = T)
?lag
which(c(0,1,rep(5,8)) == lag(1:10),na.rm = T)
which(c(0,1,rep(5,8)) == lag(1:10))
blogdown::stop_server()
not_last <- function(n_gon, number_of_points=1e5){
polygon <- poly(n_gon)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(seq_len(n_gon-1), number_of_points, replace = T)
while(any(chosen_vertex==lag(chosen_vertex), na.rm = T)){ #bad method, but it scales to other rules.
indices <- which(chosen_vertex==lag(chosen_vertex))
chosen_vertex[indices] <- sample(seq_len(n_gon-1), length(indices), replace=T)
}
for(i in 2:number_of_points){
this_vertex <- polygon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
return(points)
}
not_last(3) %>%
plot_complex_points()
not_last <- function(n_gon, number_of_points=1e5){
polygon <- poly(n_gon)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(seq_len(n_gon-1), number_of_points, replace = T)
while(any(chosen_vertex==lag(chosen_vertex), na.rm = T)){ #bad method, but it scales to other rules.
indices <- which(chosen_vertex==lag(chosen_vertex))
message(length(indices))
chosen_vertex[indices] <- sample(seq_len(n_gon-1), length(indices), replace=T)
}
for(i in 2:number_of_points){
this_vertex <- polygon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
return(points)
}
not_last <- function(n_gon, number_of_points=1e5){
polygon <- poly(n_gon)
points <- rep(0i, number_of_points) #slightly better than always extending the lists.
chosen_vertex <- sample(seq_len(n_gon-1), number_of_points, replace = T)
while(any(chosen_vertex==lag(chosen_vertex), na.rm = T)){ #bad method, but it scales to other rules.
indices <- which(chosen_vertex==lag(chosen_vertex))
message(length(indices))
chosen_vertex[indices] <- sample(seq_len(n_gon-1), length(indices), replace=T)
}
for(i in 2:number_of_points){
this_vertex <- polygon[chosen_vertex[i]]
points[i] <- (points[i-1] + this_vertex)/2
}
return(points)
}
not_last(3)
install.packages("nls")
